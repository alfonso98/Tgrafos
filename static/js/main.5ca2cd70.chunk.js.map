{"version":3,"sources":["componentes/grapher.js","componentes/opciones.js","componentes/opciones2.js","componentes/base.js","App.js","serviceWorker.js","index.js"],"names":["Graficador","_ref","graph","nodes","nodos","edges","lineas","options","height","layout","hierarchical","color","shadow","smooth","arrows","to","enabled","tipo","scaleFactor","type","middle","from","react_default","a","createElement","lib_default","useStyles","makeStyles","theme","card","background","textField","marginLeft","spacing","marginRight","form","display","flexDirection","margin","width","formControl","marginTop","minWidth","top","formControlLabel","LineaElemento","respuesta","classes","_useState","useState","_useState2","Object","slicedToArray","opc","setOpc","FormControl","className","InputLabel","Select","value","onChange","e","target","map","valor","MenuItem","id","key","label","LineaElement","Portada","_this","this","check","setCheck","_useState3","_useState4","check2","setCheck2","_useState5","_useState6","numNodos","setNumNodos","_useState7","_useState8","numLineas","setNumLineas","_useState9","_useState10","digraph","setDiagraph","_useState11","_useState12","setNodes","_useState13","_useState14","lines","setLines","_useState15","_useState16","_useState17","_useState18","opc2","setOpc2","opcHandler","num","copia","console","log","data","opc2Handler","copia2","Grid","container","direction","alignItems","item","xs","Card","CardContent","Typography","variant","TextField","n","parseInt","v","i","push","toString","createNodos","l","j","aux","createLineas","FormControlLabel","control","Switch","checked","val","index","indice","justify","opciones","bind","opciones2","Button","onClick","hidden","style","grapher","App","base","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ca2cd70.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\n\r\nfunction Graficador({nodos,lineas,tipo}) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const graph = {\r\n    nodes: nodos,\r\n    edges: lineas\r\n  };\r\n\r\n  const options = {\r\n    height: \"800px\",\r\n    layout: {\r\n      hierarchical: false\r\n    },\r\n    edges: {\r\n      color: \"#000000\",\r\n      shadow: true,\r\n      smooth: false,\r\n      arrows: {\r\n        to:     {enabled: tipo, scaleFactor:1, type:'arrow'},\r\n        middle: {enabled: false, scaleFactor:1, type:'arrow'},\r\n        from:   {enabled: false, scaleFactor:1, type:'arrow'}\r\n      },\r\n  \r\n    },\r\n    \r\n  };\r\n\r\n//   const events = {\r\n//     select: function(event) {\r\n//       var { nodes, edges } = event;\r\n//     }\r\n//   };\r\n\r\n  return (\r\n    <Graph\r\n      graph={graph}\r\n      options={options}\r\n    />\r\n  );\r\n}\r\nexport default Graficador;\r\n","import React, { useState } from \"react\";\r\nimport \"typeface-roboto\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n      background: \"#ffffff\"\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1)\r\n    },\r\n    form: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      margin: \"auto\",\r\n      width: \"fit-content\"\r\n    },\r\n    formControl: {\r\n      marginTop: 0,\r\n      minWidth: 120,\r\n      top: -9,\r\n    },\r\n    formControlLabel: {\r\n      marginTop: theme.spacing(1)\r\n    }\r\n  }));\r\n\r\nfunction LineaElemento({nodes, respuesta}) {\r\n    const classes = useStyles();\r\n    const [opc , setOpc] = useState(\"\");\r\n\r\n    const opchandler = (e) =>{\r\n        setOpc(e.target.value);\r\n        respuesta(e);\r\n    };\r\n\r\n    return (\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel>Nodo</InputLabel>\r\n        <Select value={opc} onChange={opchandler}>\r\n          {nodes.map(valor => {\r\n            return( <MenuItem value={valor.id} key={valor.key}> {valor.label}</MenuItem>);\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  }\r\n\r\n  export default LineaElemento;","import React, { useState } from \"react\";\r\nimport \"typeface-roboto\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n      background: \"#ffffff\"\r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1)\r\n    },\r\n    form: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      margin: \"auto\",\r\n      width: \"fit-content\"\r\n    },\r\n    formControl: {\r\n      marginTop: 0,\r\n      minWidth: 120,\r\n      top: -9,\r\n    },\r\n    formControlLabel: {\r\n      marginTop: theme.spacing(1)\r\n    }\r\n  }));\r\n\r\nfunction LineaElement({nodes, respuesta}) {\r\n    const classes = useStyles();\r\n    const [opc , setOpc] = useState(\"\");\r\n\r\n    const opchandler = (e) =>{\r\n        setOpc(e.target.value);\r\n        respuesta(e);\r\n    };\r\n\r\n    return (\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel>Nodo</InputLabel>\r\n        <Select value={opc} onChange={opchandler}>\r\n          {nodes.map(valor => {\r\n            return( <MenuItem value={valor.id} key={valor.key}> {valor.label}</MenuItem>);\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  }\r\n\r\n  export default LineaElement;","import React, { useState } from \"react\";\r\nimport \"typeface-roboto\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Button, TextField, FormControlLabel } from \"@material-ui/core\";\r\nimport Graficador from \"./grapher\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport LineaElemento from './opciones';\r\nimport LineaElement from './opciones2';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    background: \"#ffffff\"\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1)\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    width: \"fit-content\"\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 120\r\n  },\r\n  formControlLabel: {\r\n    marginTop: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction Portada() {\r\n  const classes = useStyles();\r\n  const [check, setCheck] = useState(true);\r\n  const [check2, setCheck2] = useState(true);\r\n  const [numNodos, setNumNodos] = useState(\"\");\r\n  const [numLineas, setNumLineas] = useState(\"\");\r\n  const [digraph, setDiagraph] = useState(false); //si es true--> digráfica | si es false --> gráfica\r\n  const [nodes, setNodes] = useState([]);\r\n  const [lines, setLines] = useState([]);\r\n  const [opc, setOpc] = useState([]);\r\n  const [opc2 , setOpc2] = useState([]);\r\n\r\n  const createNodos = v => {\r\n    let i;\r\n    let data = [];\r\n    for (i = 1; i <= v; i++) {\r\n      data.push({\r\n        id: i.toString(),\r\n        label: \"V\" + i.toString()\r\n      });\r\n    }\r\n    setNodes(data);\r\n    console.log(data);\r\n  };\r\n\r\n  const createLineas = l => {\r\n    let j;\r\n    let data = [];\r\n    let aux = [];\r\n    for (j = 1; j <= l; j++) {\r\n      data.push({\r\n        from: \"0\",\r\n        to: \"0\",\r\n        label: j.toString()\r\n      });\r\n      aux.push(\"\");\r\n    }\r\n    setLines(data);\r\n    setOpc(aux);\r\n    setOpc2(aux);\r\n    console.log(lines);\r\n  };\r\n\r\n  const muestraHandler = () => {\r\n    setCheck(!check); //HACE VISIBLE EL COMPONENTE CON LA GRÁFICA\r\n    setCheck2(!check2);\r\n\r\n  };\r\n\r\n  const numNodosHandler = e => {\r\n    let n = parseInt(e.target.value);\r\n\r\n    if (n === \"\") {\r\n      setNumNodos(\"\");\r\n    } else {\r\n      if (n > 0) {\r\n        setNumNodos(e.target.value);\r\n      } else {\r\n        setNumNodos(e.target.value);\r\n      }\r\n    }\r\n\r\n    createNodos(n);\r\n  };\r\n\r\n  const numLineasHandler = e => {\r\n    let n = parseInt(e.target.value);\r\n\r\n    if (n === \"\") {\r\n      setNumLineas(\"\");\r\n    } else {\r\n      if (n > 0) {\r\n        setNumLineas(e.target.value);\r\n      } else {\r\n        setNumLineas(\"\");\r\n      }\r\n    }\r\n    createLineas(parseInt(e.target.value));\r\n  };\r\n\r\n  const tipoHandler = () => {\r\n    setDiagraph(!digraph);\r\n  };\r\n\r\n  const opcHandler = (num, e) => {\r\n    const copia = opc;\r\n    copia[num] = e.target.value;\r\n    setOpc(copia);\r\n    console.log(opc);\r\n    const data = lines;\r\n    data[num].from = e.target.value;\r\n    setLines(data);\r\n    console.log(lines);\r\n  };\r\n\r\n  const opc2Handler = (num, e) => {\r\n    const copia2 = opc2;\r\n    copia2[num] = e.target.value;\r\n    setOpc2(copia2);\r\n    const data = lines;\r\n    data[num].to = e.target.value;\r\n    setLines(data);\r\n    console.log(lines);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        spacing={7}\r\n      >\r\n        <Grid item xs={12} />\r\n        <Card>\r\n          <CardContent>\r\n            <Typography variant=\"h3\"> Dame el número de nodos:</Typography>\r\n\r\n            <TextField\r\n              id=\"outlined-name\"\r\n              label=\"Nodos\"\r\n              value={numNodos}\r\n              onChange={numNodosHandler}\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n              id=\"outlined-name\"\r\n              label=\"Lineas\"\r\n              className={classes.textField}\r\n              value={numLineas}\r\n              onChange={numLineasHandler}\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n            />\r\n\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={digraph}\r\n                  onChange={tipoHandler}\r\n                  value=\"checkedB\"\r\n                  color=\"primary\"\r\n                  label={\"gráfica\"}\r\n                />\r\n              }\r\n              label={digraph ? \"Digráfica\" : \"Gráfica\"}\r\n            />\r\n\r\n            {lines.map((val, index, indice) => {\r\n              return (\r\n                <Card key={index.key}>\r\n                  <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                  >\r\n                    <Typography>Linea {val.label} : Conecta </Typography>\r\n                    <br />\r\n                    <br />\r\n                    <LineaElemento nodes={nodes} respuesta={opcHandler.bind(this,index)}/>\r\n                    <br />\r\n                    <br />\r\n                    <Typography> con el nodo: </Typography>\r\n                    <LineaElement nodes={nodes} respuesta={opc2Handler.bind(this, index)} />\r\n                  </Grid>\r\n                </Card>\r\n              );\r\n            })}\r\n            <br />\r\n            <Button onClick={muestraHandler}>Graficar</Button>\r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <Grid item xs={12} >\r\n        <Card hidden={check2} style={{width: \"80%\", height: \"1000px\"}}>\r\n          <CardContent>\r\n            {!check2 ?    <Graficador\r\n                nodos={nodes}\r\n                lineas={lines}\r\n                tipo={digraph}\r\n                style={{ height: \"1000px\" }}\r\n              /> : false}\r\n           \r\n          </CardContent>\r\n        </Card>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Portada;\r\n","import React from 'react';\nimport './App.css';\nimport Portada from './componentes/base';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Portada/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}